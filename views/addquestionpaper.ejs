<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Question Paper</title>
    <!-- Add Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light shadow">
        <a class="navbar-brand" href="#">TestMaster <sub>by Algodomain Solutions</sub></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse " id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/testmaster/api/questionpapers">Question Papers </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link  " href="/questions-list">Questions</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link " href="/upload">Create Questions</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link " href="/results">Results</a>
                </li>
            </ul>
        </div>
    </nav>
    <div class="container mt-4  ">
        <div class="row justify-content-lg-center ">
            <div class="col col-lg-6 border border-black rounded rounded-2 p-2 shadow ">
                <h3 class="text-center border border-black rounded rounded-2 mt-2 ">Add New Question Paper</h3>

                <div class="form-group ">
                    <label for="questionPaperTitle">Question Paper Title:</label>
                    <input type="text" class="form-control" id="questionPaperTitle" name="questionPaperTitle" required>
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea class="form-control" id="description" name="description" rows="1" required></textarea>
                </div>
                <div class="form-group">
                    <label for="minimumNumberForPassing">Minimum Number for Passing:</label>
                    <input type="number" class="form-control" id="minimumNumberForPassing"
                        name="minimumNumberForPassing" required>
                </div>
                <button type="button" class="btn btn-primary" onclick="createQuestionPaper()">Create Question
                    Paper</button>




                <!-- Add Questions Button -->
                <!-- <button id="addQuestionsButton" class="btn btn-success mt-3">Add Questions</button> -->

                <!-- Questions Table -->
                <!-- <table class="table mt-3">
                    <thead>
                        <tr>
                            <th>S. No.</th>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="questionsTableBody"> -->
                <!-- Questions will be rendered here -->
                <!-- </tbody>
                </table> -->
            </div>
        </div>
    </div>

    <!-- Add Bootstrap JS and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- Your JavaScript Code -->
    <script>
        // Function to render questions based on questionIds
        // function renderQuestions() {
        //     const savedSelectedQuestionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));
        //     const questionsTableBody = document.getElementById("questionsTableBody");

        //     if (savedSelectedQuestionIds && savedSelectedQuestionIds.length > 0) {
        //         // Convert the selectedQuestionIds array to a comma-separated string
        //         const questionIds = savedSelectedQuestionIds.join(',');

        //         // Make an HTTP GET request to your API
        //         fetch(`http://localhost:3000/api/questions-by-ids?questionIds=${questionIds}`)
        //             .then((response) => response.json())
        //             .then((data) => {
        //                 // Render the data in the table
        //                 if (data && data.length > 0) {
        //                     questionsTableBody.innerHTML = data.map((question, index) => {
        //                         return `
        //                     <tr>
        //                         <td>${index + 1}</td>
        //                         <td>${question.questionTitle}</td>
        //                         <td>${question.questionDescription}</td>
        //                         <td>
        //                             <button class="btn btn-danger" onclick="deleteQuestion(${question.questionId})">Delete</button>
        //                         </td>
        //                     </tr>
        //                 `;
        //                     }).join("");
        //                 } else {
        //                     questionsTableBody.innerHTML = "<tr><td colspan='4'>No questions found</td></tr>";
        //                 }
        //             })
        //             .catch((error) => {
        //                 console.error("Error fetching questions:", error);
        //                 questionsTableBody.innerHTML = "<tr><td colspan='4'>Error fetching questions</td></tr>";
        //             });
        //     } else {
        //         questionsTableBody.innerHTML = "<tr><td colspan='4'>No questions selected</td></tr>";
        //     }
        // }



        // document.getElementById("addQuestionsButton").addEventListener("click", function () {

        //     window.location.href = "/questions-list";
        // });

        // Initial render of questions
        // renderQuestions();

        function createQuestionPaper() {
            // const savedSelectedQuestionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));

            // if (!savedSelectedQuestionIds || savedSelectedQuestionIds.length === 0) {
            //     alert("Please add questions to the question paper.");
            //     return;
            // }

            const questionPaperTitle = document.getElementById("questionPaperTitle").value;
            const description = document.getElementById("description").value;
            const minimumNumberForPassing = document.getElementById("minimumNumberForPassing").value;

            const requestData = {
                questionPaperTitle,
                description,
                minimumNumberForPassing,
            };

            fetch("http://localhost:3000/testmaster/api/questionpapers", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(requestData),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log("Question paper created successfully:", data);
                    // localStorage.removeItem("selectedQuestionIds");
                    // window.location.href = '/testmaster/api/questionpapers';

                    // Assuming the server responds with the newly created questionPaperId
                    const questionPaperId = data;
                    console.log(questionPaperId)
                    localStorage.setItem('questionPaperId', questionPaperId);
                    // Redirect to the Question Paper Details page with the questionPaperId as a query parameter
                    window.location.href = `/testmaster/api/questionpapersdetails/${questionPaperId}`;

                })
                .catch((error) => {
                    console.error("Error creating question paper:", error);

                });
        }

        // Function to delete a question (you can replace it with your logic)
        function deleteQuestion(questionId) {
            // Replace this with your logic to delete the question
            console.log("Deleting question with ID:", questionId);
            // After deletion, you can call renderQuestions() again to refresh the table
        }
    </script>
</body>

</html>